import 'package:dio/dio.dart';
import '../models/post_model.dart';
import '../models/user_model.dart';
import '../models/comment_model.dart';

class ApiService {
  final Dio _dio = Dio(
    BaseOptions(
      baseUrl: 'https://jsonplaceholder.typicode.com',
      headers: {'Content-Type': 'application/json'},
    ),
  );

  Future<List<Post>> getPosts() async {
    try {
      final response = await _dio.get('/posts');
      return (response.data as List).map((e) => Post.fromJson(e)).toList();
    } catch (e) {
      print('Error in getPosts: $e');
      rethrow;
    }
  }

  Future<Post> getPostById(int id) async {
    try {
      final response = await _dio.get('/posts/$id');
      return Post.fromJson(response.data);
    } catch (e) {
      print('Error in getPostById: $e');
      rethrow;
    }
  }

  Future<List<Post>> getPostsByUser(int userId) async {
    try {
      final response = await _dio.get('/posts', queryParameters: {'userId': userId});
      return (response.data as List).map((e) => Post.fromJson(e)).toList();
    } catch (e) {
      print('Error in getPostsByUser: $e');
      rethrow;
    }
  }

  Future<void> createPost(Post post) async {
    try {
      final data = post.toJson()..remove('id'); // ID gönderme
      await _dio.post('/posts', data: data);
    } catch (e) {
      print('Error in createPost: $e');
      rethrow;
    }
  }

  Future<void> updatePost(Post post) async {
    try {
      final data = post.toJson()..remove('id'); // PUT'ta id parametrede, içerikte gerek yok
      await _dio.put('/posts/${post.id}', data: data);
    } catch (e) {
      print('Error in updatePost: $e');
      rethrow;
    }
  }

  Future<void> deletePost(int id) async {
    try {
      await _dio.delete('/posts/$id');
    } catch (e) {
      print('Error in deletePost: $e');
      rethrow;
    }
  }

  Future<List<Comment>> getCommentsByPostId(int postId) async {
    try {
      final response = await _dio.get('/posts/$postId/comments');
      return (response.data as List).map((e) => Comment.fromJson(e)).toList();
    } catch (e) {
      print('Error in getCommentsByPostId: $e');
      rethrow;
    }
  }

  Future<void> addComment(Comment comment) async {
    try {
      await _dio.post('/comments', data: {
        'postId': comment.postId,
        'name': comment.name,
        'email': comment.email,
        'body': comment.body,
      });
    } catch (e) {
      print('Error in addComment: $e');
      rethrow;
    }
  }

  Future<List<User>> getUsers() async {
    try {
      final response = await _dio.get('/users');
      return (response.data as List).map((e) => User.fromJson(e)).toList();
    } catch (e) {
      print('Error in getUsers: $e');
      rethrow;
    }
  }

  Future<User> getUserById(int id) async {
    try {
      final response = await _dio.get('/users/$id');
      return User.fromJson(response.data);
    } catch (e) {
      print('Error in getUserById: $e');
      rethrow;
    }
  }
}
